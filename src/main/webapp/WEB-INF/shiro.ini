# =======================
# Shiro INI configuration
# =======================

[main]
# passing threw shiro login filter
authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
# set login url
authc.loginUrl = /login.xhtml
# redirect url called after successful login
authc.successUrl = /bienvenue.xhtml
# set un unauthorized url
#roles.unauthorizedUrl = /access.xhtml

ssl.enabled = false
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager
# Use default password matcher (SHA-256, 500000 hash iterations)
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
# DataSource Setup
datasource = org.apache.shiro.jndi.JndiObjectFactory
datasource.resourceName = java:comp/env/jdbc/couture
datasource.resourceRef = true

# JDBC Realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authorizationCachingEnabled = true
jdbcRealm.authenticationQuery = SELECT mdp FROM Utilisateur WHERE login = ? AND actif = 1
jdbcRealm.userRolesQuery = SELECT ur.RoleIdRole FROM Utilisateur_Role ur, Utilisateur u WHERE u.login = ? AND ur.UtilisateurIdUtilisateur = u.IdUtilisateur AND ur.actif=1 ORDER BY ur.RoleIdRole LIMIT 1
jdbcRealm.permissionsLookupEnabled = false
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource = $datasource
securityManager.realms = $jdbcRealm


[urls]
# Allow JSF static resources
/javax.faces.resource/** = anon
/resources/** = anon
/css/** = anon

# Allow specific public pages
/formReinitialisation.xhtml = anon
/envoiInfo.xhtml = anon
/login.xhtml = authc

# Allow all JSF pages for authenticated users
/**.xhtml = authc

# Protect main pages
/bienvenue.xhtml = authc, user
/logout = logout

# Protect admin pages
/admin/** = authc, roles[root]

# make page only available for role
;/admin/** = authc, roles[root]